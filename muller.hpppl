#cas
cas_muller(fx, pts, var, err):=
BEGIN
  local i, j, ptsy, d1, d2, a, b, tmp, nv, h1, h2, D, E, h;
  nv := 0;
  h := 1;
  j := 1;
  WHILE ABS(h) > 10^(-err) DO 
    //clearing list
    ptsy := {};

    //evaluating fx on points
    FOR i FROM 1 TO size(pts) do
      tmp  := EVAL(subst(fx, var=pts(i)));
      ptsy := CONCAT(ptsy, tmp);
    END;
    //getting heights
    h1 := pts(2) - pts(1);
    h2 := pts(3) - pts(2);
    
    //getting deltas
    d1 := exact((ptsy(2) - ptsy(1))/h1);
    d2 := (ptsy(3) - ptsy(2))/h2;
    

    //setting a, b and c = ptsy(3)
    a := (d2 - d1)/(h2 + h1);
    b := (d2 + a*h2);
    

    //getting x3 or new value
    D:= sqrt(b^2-4*a*ptsy(3));
    IF ABS(b - D) < ABS(b + D) THEN
      E := b + D; 
    ELSE
      E := b - D;
    END;
    h := âˆ’2*ptsy(3)/E;
    nv := pts(3) + h;

    M1(j, 1) := EVAL(pts(1));
    M1(j, 2) := EVAL(pts(2));
    M1(j, 3) := EVAL(pts(3));
    M1(j, 4) := EVAL(a);
    M1(j, 5) := EVAL(b);
    M1(j, 6) := EVAL(ptsy(3));
    M1(j, 7) := EVAL(nv);
    pts(1) := pts(2);
    pts(2) := pts(3);
    pts(3) := nv;
    j := j + 1;
  END;
  return nv;
END;
#end

EXPORT muller(fx, pts, var, err)
BEGIN
  return cas_muller(fx, pts, var, err);
END;
